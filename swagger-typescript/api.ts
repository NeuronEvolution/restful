/**
 * Stock Assistant
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://localhost/api/stock-assistant/v1".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface InlineResponseDefault {
    "status"?: string;
    /**
     * Error code
     */
    "code"?: string;
    /**
     * Error message
     */
    "message"?: string;
    /**
     * Errors
     */
    "errors"?: Array<InlineResponseDefaultErrors>;
}

export interface InlineResponseDefaultErrors {
    /**
     * field name
     */
    "field"?: string;
    /**
     * error code
     */
    "code"?: string;
    /**
     * error message
     */
    "message"?: string;
}

/**
 * stock index
 */
export interface StockIndexAdvice {
    /**
     * name
     */
    "indexName"?: string;
    /**
     * used count
     */
    "usedCount"?: number;
}

/**
 * index evaluate
 */
export interface UserIndexEvaluate {
    /**
     * index name
     */
    "indexName"?: string;
    /**
     * eval stars
     */
    "evalStars"?: number;
    /**
     * eval remark
     */
    "evalRemark"?: string;
    /**
     * update time
     */
    "updateTime"?: Date;
}

/**
 * User stock setting
 */
export interface UserSetting {
    /**
     * Key
     */
    "key"?: string;
    /**
     * Value
     */
    "value"?: string;
}

/**
 * stock evaluate
 */
export interface UserStockEvaluate {
    /**
     * stock id
     */
    "stockId"?: string;
    /**
     * score
     */
    "totalScore"?: number;
    /**
     * remark
     */
    "evalRemark"?: string;
    /**
     * Exchange id
     */
    "exchangeId"?: string;
    /**
     * Exchange name
     */
    "exchangeName"?: string;
    /**
     * Stock code
     */
    "stockCode"?: string;
    /**
     * Stock name cn
     */
    "stockNameCN"?: string;
    /**
     * Launch date
     */
    "launchDate"?: Date;
    /**
     * Website url
     */
    "websiteUrl"?: string;
    /**
     * Industry name
     */
    "industryName"?: string;
    /**
     * City name cn
     */
    "cityNameCN"?: string;
    /**
     * Province name cn
     */
    "provinceNameCN"?: string;
}

/**
 * User stock index
 */
export interface UserStockIndex {
    /**
     * name
     */
    "name"?: string;
    /**
     * desc
     */
    "desc"?: string;
    /**
     * Eval weight
     */
    "evalWeight"?: number;
    /**
     * ai weight
     */
    "aiWeight"?: number;
    /**
     * ni weight
     */
    "niWeight"?: string;
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /**
     * 
     * @summary list
     * @param pageToken 
     * @param pageSize 
     */
    stockIndexAdviceList(params: {  "pageToken"?: string; "pageSize"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/stockIndexAdvices`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageToken": params["pageToken"],
            "pageSize": params["pageSize"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     * @param indexName index name
     */
    userIndexEvaluateGet(params: {  "userId": string; "stockId": string; "indexName": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userIndexEvaluateGet");
        }
        // verify required parameter "stockId" is set
        if (params["stockId"] == null) {
            throw new Error("Missing required parameter stockId when calling userIndexEvaluateGet");
        }
        // verify required parameter "indexName" is set
        if (params["indexName"] == null) {
            throw new Error("Missing required parameter indexName when calling userIndexEvaluateGet");
        }
        const baseUrl = `/{userId}/stockEvaluates/{stockId}/indexEvaluates/{indexName}`
            .replace(`{${"userId"}}`, `${ params["userId"] }`)
            .replace(`{${"stockId"}}`, `${ params["stockId"] }`)
            .replace(`{${"indexName"}}`, `${ params["indexName"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     */
    userIndexEvaluateList(params: {  "userId": string; "stockId": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userIndexEvaluateList");
        }
        // verify required parameter "stockId" is set
        if (params["stockId"] == null) {
            throw new Error("Missing required parameter stockId when calling userIndexEvaluateList");
        }
        const baseUrl = `/{userId}/stockEvaluates/{stockId}/indexEvaluates`
            .replace(`{${"userId"}}`, `${ params["userId"] }`)
            .replace(`{${"stockId"}}`, `${ params["stockId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     * @param indexEvaluate 
     */
    userIndexEvaluateSave(params: {  "userId": string; "stockId": string; "indexEvaluate": UserIndexEvaluate; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userIndexEvaluateSave");
        }
        // verify required parameter "stockId" is set
        if (params["stockId"] == null) {
            throw new Error("Missing required parameter stockId when calling userIndexEvaluateSave");
        }
        // verify required parameter "indexEvaluate" is set
        if (params["indexEvaluate"] == null) {
            throw new Error("Missing required parameter indexEvaluate when calling userIndexEvaluateSave");
        }
        const baseUrl = `/{userId}/stockEvaluates/{stockId}/indexEvaluates`
            .replace(`{${"userId"}}`, `${ params["userId"] }`)
            .replace(`{${"stockId"}}`, `${ params["stockId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["indexEvaluate"]) {
            fetchOptions.body = JSON.stringify(params["indexEvaluate"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param configKey config key
     */
    userSettingDelete(params: {  "userId": string; "configKey": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userSettingDelete");
        }
        // verify required parameter "configKey" is set
        if (params["configKey"] == null) {
            throw new Error("Missing required parameter configKey when calling userSettingDelete");
        }
        const baseUrl = `/{userId}/settings/{configKey}`
            .replace(`{${"userId"}}`, `${ params["userId"] }`)
            .replace(`{${"configKey"}}`, `${ params["configKey"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param configKey config key
     */
    userSettingGet(params: {  "userId": string; "configKey": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userSettingGet");
        }
        // verify required parameter "configKey" is set
        if (params["configKey"] == null) {
            throw new Error("Missing required parameter configKey when calling userSettingGet");
        }
        const baseUrl = `/{userId}/settings/{configKey}`
            .replace(`{${"userId"}}`, `${ params["userId"] }`)
            .replace(`{${"configKey"}}`, `${ params["configKey"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary list
     * @param userId User id
     */
    userSettingList(params: {  "userId": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userSettingList");
        }
        const baseUrl = `/{userId}/settings`
            .replace(`{${"userId"}}`, `${ params["userId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary save
     * @param userId User id
     * @param setting setting
     */
    userSettingSave(params: {  "userId": string; "setting": UserSetting; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userSettingSave");
        }
        // verify required parameter "setting" is set
        if (params["setting"] == null) {
            throw new Error("Missing required parameter setting when calling userSettingSave");
        }
        const baseUrl = `/{userId}/settings`
            .replace(`{${"userId"}}`, `${ params["userId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["setting"]) {
            fetchOptions.body = JSON.stringify(params["setting"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     */
    userStockEvaluateGet(params: {  "userId": string; "stockId": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockEvaluateGet");
        }
        // verify required parameter "stockId" is set
        if (params["stockId"] == null) {
            throw new Error("Missing required parameter stockId when calling userStockEvaluateGet");
        }
        const baseUrl = `/{userId}/stockEvaluates/{stockId}`
            .replace(`{${"userId"}}`, `${ params["userId"] }`)
            .replace(`{${"stockId"}}`, `${ params["stockId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param pageToken page token
     * @param pageSize page size
     * @param sort sort
     * @param notEvaluated not evaluated
     */
    userStockEvaluateList(params: {  "userId": string; "pageToken"?: string; "pageSize"?: string; "sort"?: string; "notEvaluated"?: string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockEvaluateList");
        }
        const baseUrl = `/{userId}/stockEvaluates`
            .replace(`{${"userId"}}`, `${ params["userId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageToken": params["pageToken"],
            "pageSize": params["pageSize"],
            "sort": params["sort"],
            "notEvaluated": params["notEvaluated"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary add
     * @param userId User id
     * @param index Index
     */
    userStockIndexAdd(params: {  "userId": string; "index": UserStockIndex; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexAdd");
        }
        // verify required parameter "index" is set
        if (params["index"] == null) {
            throw new Error("Missing required parameter index when calling userStockIndexAdd");
        }
        const baseUrl = `/{userId}/stockIndices`
            .replace(`{${"userId"}}`, `${ params["userId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["index"]) {
            fetchOptions.body = JSON.stringify(params["index"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexDelete(params: {  "userId": string; "indexName": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexDelete");
        }
        // verify required parameter "indexName" is set
        if (params["indexName"] == null) {
            throw new Error("Missing required parameter indexName when calling userStockIndexDelete");
        }
        const baseUrl = `/{userId}/stockIndices/{indexName}`
            .replace(`{${"userId"}}`, `${ params["userId"] }`)
            .replace(`{${"indexName"}}`, `${ params["indexName"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Get user index
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexGet(params: {  "userId": string; "indexName": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexGet");
        }
        // verify required parameter "indexName" is set
        if (params["indexName"] == null) {
            throw new Error("Missing required parameter indexName when calling userStockIndexGet");
        }
        const baseUrl = `/{userId}/stockIndices/{indexName}`
            .replace(`{${"userId"}}`, `${ params["userId"] }`)
            .replace(`{${"indexName"}}`, `${ params["indexName"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary Get user indices
     * @param userId User id
     */
    userStockIndexList(params: {  "userId": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexList");
        }
        const baseUrl = `/{userId}/stockIndices`
            .replace(`{${"userId"}}`, `${ params["userId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param nameOld old name
     * @param nameNew new name
     */
    userStockIndexRename(params: {  "userId": string; "nameOld": string; "nameNew": string; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexRename");
        }
        // verify required parameter "nameOld" is set
        if (params["nameOld"] == null) {
            throw new Error("Missing required parameter nameOld when calling userStockIndexRename");
        }
        // verify required parameter "nameNew" is set
        if (params["nameNew"] == null) {
            throw new Error("Missing required parameter nameNew when calling userStockIndexRename");
        }
        const baseUrl = `/{userId}/stockIndices/rename`
            .replace(`{${"userId"}}`, `${ params["userId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "nameOld": params["nameOld"],
            "nameNew": params["nameNew"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary update
     * @param userId User id
     * @param indexName index id
     * @param index Index
     */
    userStockIndexUpdate(params: {  "userId": string; "indexName": string; "index": UserStockIndex; }, options?: any): FetchArgs {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexUpdate");
        }
        // verify required parameter "indexName" is set
        if (params["indexName"] == null) {
            throw new Error("Missing required parameter indexName when calling userStockIndexUpdate");
        }
        // verify required parameter "index" is set
        if (params["index"] == null) {
            throw new Error("Missing required parameter index when calling userStockIndexUpdate");
        }
        const baseUrl = `/{userId}/stockIndices/{indexName}`
            .replace(`{${"userId"}}`, `${ params["userId"] }`)
            .replace(`{${"indexName"}}`, `${ params["indexName"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["index"]) {
            fetchOptions.body = JSON.stringify(params["index"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /**
     * 
     * @summary list
     * @param pageToken 
     * @param pageSize 
     */
    stockIndexAdviceList(params: { "pageToken"?: string; "pageSize"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<StockIndexAdvice>> {
        const fetchArgs = DefaultApiFetchParamCreator.stockIndexAdviceList(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     * @param indexName index name
     */
    userIndexEvaluateGet(params: { "userId": string; "stockId": string; "indexName": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserIndexEvaluate> {
        const fetchArgs = DefaultApiFetchParamCreator.userIndexEvaluateGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     */
    userIndexEvaluateList(params: { "userId": string; "stockId": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserIndexEvaluate>> {
        const fetchArgs = DefaultApiFetchParamCreator.userIndexEvaluateList(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     * @param indexEvaluate 
     */
    userIndexEvaluateSave(params: { "userId": string; "stockId": string; "indexEvaluate": UserIndexEvaluate;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserIndexEvaluate> {
        const fetchArgs = DefaultApiFetchParamCreator.userIndexEvaluateSave(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param configKey config key
     */
    userSettingDelete(params: { "userId": string; "configKey": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userSettingDelete(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param configKey config key
     */
    userSettingGet(params: { "userId": string; "configKey": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserSetting> {
        const fetchArgs = DefaultApiFetchParamCreator.userSettingGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary list
     * @param userId User id
     */
    userSettingList(params: { "userId": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserSetting>> {
        const fetchArgs = DefaultApiFetchParamCreator.userSettingList(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary save
     * @param userId User id
     * @param setting setting
     */
    userSettingSave(params: { "userId": string; "setting": UserSetting;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserSetting> {
        const fetchArgs = DefaultApiFetchParamCreator.userSettingSave(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     */
    userStockEvaluateGet(params: { "userId": string; "stockId": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserStockEvaluate> {
        const fetchArgs = DefaultApiFetchParamCreator.userStockEvaluateGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param pageToken page token
     * @param pageSize page size
     * @param sort sort
     * @param notEvaluated not evaluated
     */
    userStockEvaluateList(params: { "userId": string; "pageToken"?: string; "pageSize"?: string; "sort"?: string; "notEvaluated"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserStockEvaluate>> {
        const fetchArgs = DefaultApiFetchParamCreator.userStockEvaluateList(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary add
     * @param userId User id
     * @param index Index
     */
    userStockIndexAdd(params: { "userId": string; "index": UserStockIndex;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserStockIndex> {
        const fetchArgs = DefaultApiFetchParamCreator.userStockIndexAdd(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexDelete(params: { "userId": string; "indexName": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.userStockIndexDelete(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Get user index
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexGet(params: { "userId": string; "indexName": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserStockIndex> {
        const fetchArgs = DefaultApiFetchParamCreator.userStockIndexGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary Get user indices
     * @param userId User id
     */
    userStockIndexList(params: { "userId": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserStockIndex>> {
        const fetchArgs = DefaultApiFetchParamCreator.userStockIndexList(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary 
     * @param userId User id
     * @param nameOld old name
     * @param nameNew new name
     */
    userStockIndexRename(params: { "userId": string; "nameOld": string; "nameNew": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserStockIndex> {
        const fetchArgs = DefaultApiFetchParamCreator.userStockIndexRename(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary update
     * @param userId User id
     * @param indexName index id
     * @param index Index
     */
    userStockIndexUpdate(params: { "userId": string; "indexName": string; "index": UserStockIndex;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserStockIndex> {
        const fetchArgs = DefaultApiFetchParamCreator.userStockIndexUpdate(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary list
     * @param pageToken 
     * @param pageSize 
     */
    stockIndexAdviceList(params: {  "pageToken"?: string; "pageSize"?: string; }, options?: any) {
        return DefaultApiFp.stockIndexAdviceList(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     * @param indexName index name
     */
    userIndexEvaluateGet(params: {  "userId": string; "stockId": string; "indexName": string; }, options?: any) {
        return DefaultApiFp.userIndexEvaluateGet(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     */
    userIndexEvaluateList(params: {  "userId": string; "stockId": string; }, options?: any) {
        return DefaultApiFp.userIndexEvaluateList(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     * @param indexEvaluate 
     */
    userIndexEvaluateSave(params: {  "userId": string; "stockId": string; "indexEvaluate": UserIndexEvaluate; }, options?: any) {
        return DefaultApiFp.userIndexEvaluateSave(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary 
     * @param userId User id
     * @param configKey config key
     */
    userSettingDelete(params: {  "userId": string; "configKey": string; }, options?: any) {
        return DefaultApiFp.userSettingDelete(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary 
     * @param userId User id
     * @param configKey config key
     */
    userSettingGet(params: {  "userId": string; "configKey": string; }, options?: any) {
        return DefaultApiFp.userSettingGet(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary list
     * @param userId User id
     */
    userSettingList(params: {  "userId": string; }, options?: any) {
        return DefaultApiFp.userSettingList(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary save
     * @param userId User id
     * @param setting setting
     */
    userSettingSave(params: {  "userId": string; "setting": UserSetting; }, options?: any) {
        return DefaultApiFp.userSettingSave(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary 
     * @param userId User id
     * @param stockId stock id
     */
    userStockEvaluateGet(params: {  "userId": string; "stockId": string; }, options?: any) {
        return DefaultApiFp.userStockEvaluateGet(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary 
     * @param userId User id
     * @param pageToken page token
     * @param pageSize page size
     * @param sort sort
     * @param notEvaluated not evaluated
     */
    userStockEvaluateList(params: {  "userId": string; "pageToken"?: string; "pageSize"?: string; "sort"?: string; "notEvaluated"?: string; }, options?: any) {
        return DefaultApiFp.userStockEvaluateList(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary add
     * @param userId User id
     * @param index Index
     */
    userStockIndexAdd(params: {  "userId": string; "index": UserStockIndex; }, options?: any) {
        return DefaultApiFp.userStockIndexAdd(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary 
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexDelete(params: {  "userId": string; "indexName": string; }, options?: any) {
        return DefaultApiFp.userStockIndexDelete(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Get user index
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexGet(params: {  "userId": string; "indexName": string; }, options?: any) {
        return DefaultApiFp.userStockIndexGet(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary Get user indices
     * @param userId User id
     */
    userStockIndexList(params: {  "userId": string; }, options?: any) {
        return DefaultApiFp.userStockIndexList(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary 
     * @param userId User id
     * @param nameOld old name
     * @param nameNew new name
     */
    userStockIndexRename(params: {  "userId": string; "nameOld": string; "nameNew": string; }, options?: any) {
        return DefaultApiFp.userStockIndexRename(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary update
     * @param userId User id
     * @param indexName index id
     * @param index Index
     */
    userStockIndexUpdate(params: {  "userId": string; "indexName": string; "index": UserStockIndex; }, options?: any) {
        return DefaultApiFp.userStockIndexUpdate(params, options)(this.fetch, this.basePath);
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary list
         * @param pageToken 
         * @param pageSize 
         */
        stockIndexAdviceList(params: {  "pageToken"?: string; "pageSize"?: string; }, options?: any) {
            return DefaultApiFp.stockIndexAdviceList(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param userId User id
         * @param stockId stock id
         * @param indexName index name
         */
        userIndexEvaluateGet(params: {  "userId": string; "stockId": string; "indexName": string; }, options?: any) {
            return DefaultApiFp.userIndexEvaluateGet(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param userId User id
         * @param stockId stock id
         */
        userIndexEvaluateList(params: {  "userId": string; "stockId": string; }, options?: any) {
            return DefaultApiFp.userIndexEvaluateList(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param userId User id
         * @param stockId stock id
         * @param indexEvaluate 
         */
        userIndexEvaluateSave(params: {  "userId": string; "stockId": string; "indexEvaluate": UserIndexEvaluate; }, options?: any) {
            return DefaultApiFp.userIndexEvaluateSave(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param userId User id
         * @param configKey config key
         */
        userSettingDelete(params: {  "userId": string; "configKey": string; }, options?: any) {
            return DefaultApiFp.userSettingDelete(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param userId User id
         * @param configKey config key
         */
        userSettingGet(params: {  "userId": string; "configKey": string; }, options?: any) {
            return DefaultApiFp.userSettingGet(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary list
         * @param userId User id
         */
        userSettingList(params: {  "userId": string; }, options?: any) {
            return DefaultApiFp.userSettingList(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary save
         * @param userId User id
         * @param setting setting
         */
        userSettingSave(params: {  "userId": string; "setting": UserSetting; }, options?: any) {
            return DefaultApiFp.userSettingSave(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param userId User id
         * @param stockId stock id
         */
        userStockEvaluateGet(params: {  "userId": string; "stockId": string; }, options?: any) {
            return DefaultApiFp.userStockEvaluateGet(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param userId User id
         * @param pageToken page token
         * @param pageSize page size
         * @param sort sort
         * @param notEvaluated not evaluated
         */
        userStockEvaluateList(params: {  "userId": string; "pageToken"?: string; "pageSize"?: string; "sort"?: string; "notEvaluated"?: string; }, options?: any) {
            return DefaultApiFp.userStockEvaluateList(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary add
         * @param userId User id
         * @param index Index
         */
        userStockIndexAdd(params: {  "userId": string; "index": UserStockIndex; }, options?: any) {
            return DefaultApiFp.userStockIndexAdd(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param userId User id
         * @param indexName index id
         */
        userStockIndexDelete(params: {  "userId": string; "indexName": string; }, options?: any) {
            return DefaultApiFp.userStockIndexDelete(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get user index
         * @param userId User id
         * @param indexName index id
         */
        userStockIndexGet(params: {  "userId": string; "indexName": string; }, options?: any) {
            return DefaultApiFp.userStockIndexGet(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get user indices
         * @param userId User id
         */
        userStockIndexList(params: {  "userId": string; }, options?: any) {
            return DefaultApiFp.userStockIndexList(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param userId User id
         * @param nameOld old name
         * @param nameNew new name
         */
        userStockIndexRename(params: {  "userId": string; "nameOld": string; "nameNew": string; }, options?: any) {
            return DefaultApiFp.userStockIndexRename(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary update
         * @param userId User id
         * @param indexName index id
         * @param index Index
         */
        userStockIndexUpdate(params: {  "userId": string; "indexName": string; "index": UserStockIndex; }, options?: any) {
            return DefaultApiFp.userStockIndexUpdate(params, options)(fetch, basePath);
        },
    };
};

